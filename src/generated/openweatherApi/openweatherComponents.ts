/**
 * Generated by @openapi-codegen
 *
 * @version 3.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useOpenweatherContext,
  OpenweatherContext,
} from "./openweatherContext";
import type * as Fetcher from "./openweatherFetcher";
import { openweatherFetch } from "./openweatherFetcher";
import type * as Schemas from "./openweatherSchemas";
import type * as Responses from "./openweatherResponses";

export type GetWeatherQueryParams = {
  /**
   * Latitude coordinate
   *
   * @minimum -90
   * @maximum 90
   */
  lat: number;
  /**
   * Longitude coordinate
   *
   * @minimum -180
   * @maximum 180
   */
  lon: number;
  /**
   * Your unique API key
   */
  appid: string;
  /**
   * Comma-separated list of data blocks to exclude (current,minutely,hourly,daily,alerts)
   */
  exclude?: string;
  /**
   * Units of measurement
   *
   * @default standard
   */
  units?: "standard" | "metric" | "imperial";
  /**
   * Language code for translations
   */
  lang?: string;
};

export type GetWeatherError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.Error400;
    }
  | {
      status: 401;
      payload: Responses.Error401;
    }
>;

export type GetWeatherVariables = {
  queryParams: GetWeatherQueryParams;
} & OpenweatherContext["fetcherOptions"];

export const fetchGetWeather = (
  variables: GetWeatherVariables,
  signal?: AbortSignal,
) =>
  openweatherFetch<
    Schemas.OneCallResponse,
    GetWeatherError,
    undefined,
    {},
    GetWeatherQueryParams,
    {}
  >({ url: "/onecall", method: "get", ...variables, signal });

export const useGetWeather = <TData = Schemas.OneCallResponse,>(
  variables: GetWeatherVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OneCallResponse, GetWeatherError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenweatherContext(options);
  return reactQuery.useQuery<Schemas.OneCallResponse, GetWeatherError, TData>({
    queryKey: queryKeyFn({
      path: "/onecall",
      operationId: "getWeather",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetWeather({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetWeatherHistoricalQueryParams = {
  /**
   * Latitude coordinate
   *
   * @minimum -90
   * @maximum 90
   */
  lat: number;
  /**
   * Longitude coordinate
   *
   * @minimum -180
   * @maximum 180
   */
  lon: number;
  /**
   * Timestamp (Unix time, UTC time zone)
   */
  dt: number;
  /**
   * Your unique API key
   */
  appid: string;
  /**
   * @default standard
   */
  units?: "standard" | "metric" | "imperial";
  lang?: string;
};

export type GetWeatherHistoricalError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.Error400;
    }
  | {
      status: 401;
      payload: Responses.Error401;
    }
>;

export type GetWeatherHistoricalVariables = {
  queryParams: GetWeatherHistoricalQueryParams;
} & OpenweatherContext["fetcherOptions"];

export const fetchGetWeatherHistorical = (
  variables: GetWeatherHistoricalVariables,
  signal?: AbortSignal,
) =>
  openweatherFetch<
    Schemas.TimeMachineResponse,
    GetWeatherHistoricalError,
    undefined,
    {},
    GetWeatherHistoricalQueryParams,
    {}
  >({ url: "/onecall/timemachine", method: "get", ...variables, signal });

export const useGetWeatherHistorical = <TData = Schemas.TimeMachineResponse,>(
  variables: GetWeatherHistoricalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TimeMachineResponse,
      GetWeatherHistoricalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenweatherContext(options);
  return reactQuery.useQuery<
    Schemas.TimeMachineResponse,
    GetWeatherHistoricalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/onecall/timemachine",
      operationId: "getWeatherHistorical",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetWeatherHistorical({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetWeatherDaySummaryQueryParams = {
  /**
   * Latitude coordinate
   *
   * @minimum -90
   * @maximum 90
   */
  lat: number;
  /**
   * Longitude coordinate
   *
   * @minimum -180
   * @maximum 180
   */
  lon: number;
  /**
   * Date in YYYY-MM-DD format
   *
   * @format date
   */
  date: string;
  /**
   * Your unique API key
   */
  appid: string;
  /**
   * @default standard
   */
  units?: "standard" | "metric" | "imperial";
  /**
   * Timezone in Â±XX:XX format
   */
  tz?: string;
};

export type GetWeatherDaySummaryError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.Error400;
    }
  | {
      status: 401;
      payload: Responses.Error401;
    }
>;

export type GetWeatherDaySummaryVariables = {
  queryParams: GetWeatherDaySummaryQueryParams;
} & OpenweatherContext["fetcherOptions"];

export const fetchGetWeatherDaySummary = (
  variables: GetWeatherDaySummaryVariables,
  signal?: AbortSignal,
) =>
  openweatherFetch<
    Schemas.DaySummaryResponse,
    GetWeatherDaySummaryError,
    undefined,
    {},
    GetWeatherDaySummaryQueryParams,
    {}
  >({ url: "/onecall/day_summary", method: "get", ...variables, signal });

export const useGetWeatherDaySummary = <TData = Schemas.DaySummaryResponse,>(
  variables: GetWeatherDaySummaryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DaySummaryResponse,
      GetWeatherDaySummaryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenweatherContext(options);
  return reactQuery.useQuery<
    Schemas.DaySummaryResponse,
    GetWeatherDaySummaryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/onecall/day_summary",
      operationId: "getWeatherDaySummary",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetWeatherDaySummary({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/onecall";
      operationId: "getWeather";
      variables: GetWeatherVariables;
    }
  | {
      path: "/onecall/timemachine";
      operationId: "getWeatherHistorical";
      variables: GetWeatherHistoricalVariables;
    }
  | {
      path: "/onecall/day_summary";
      operationId: "getWeatherDaySummary";
      variables: GetWeatherDaySummaryVariables;
    };
